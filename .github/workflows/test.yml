name: run qemu
on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release"
        required: true
        default: false
        type: boolean

jobs:
  aarch64_job:
    # The host should always be Linux
    runs-on: ubuntu-22.04
    name: Build on ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu22.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
            ls -al
            apt update
            apt install -y clang cmake git ccache automake flex lzop bison gperf build-essential \
                           zip curl zlib1g-dev g++ libxml2-utils bzip2 libbz2-dev libbz2-1.0 \
                           libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool \
                           make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom \
                           libxml-sax-base-perl libxml-simple-perl bc libx11-dev \
                           libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 python3-pip \
                           rename libelf-dev dwarves
            apt list --upgradable
            apt upgrade
            apt update
            apt update -y
            apt install -y git libssl-dev gcc-arm-linux-gnueabi build-essential libncurses5-dev \
                           bzip2 make gcc g++ grep bc curl bison flex openssl lzop ccache unzip \
                           zlib1g-dev file ca-certificates ccache wget cmake texinfo ca-certificates \
                           zlib1g-dev xz-utils libelf-dev zip libgmp-dev xz-utils libncurses-dev g++ \
                           gawk m4 libtinfo5 cpio binutils-dev libelf-dev cmake ninja-build texinfo \
                           u-boot-tools python zstd clang
            pip3 install Cython
            pip3 install tensorflow
            dir_1=$(pwd)
            mkdir -p $dir_1/workspace
            ./build_llvm.sh --all-opts --use-jemalloc --shallow-clone --install-dir=$dir_1/workspace
            ls -al $dir_1/workspace

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
